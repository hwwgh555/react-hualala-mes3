{
	// Place your snippets for javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "csl",
		"body": [
			"console.log('打印=====>>>>${1:var}', ${1:var});",
		],
		"description": "my console"
	},
	"Pause to debuuger": {
		"prefix": "db",
		"body": [
			"debugger"
		],
		"description": "debug the code and result"
	},
	"ajax-loading": {
		"prefix": "rrl-react-redux-loading",
		"body": [
			"// loading",
			"export const AJAX_LOADING_TRUE = '${4:MES3_}${5:WORK_SITE} >> loading true'",
			"export const AJAX_LOADING_FALSE = '${4:MES3_}${5:WORK_SITE} >> loading false'",
		],
		"description": "React react-redux's ajax: ajax loading"
	},
	"react-redux-ajax1": {
		"prefix": "rrag-react-redux-ajax=>global data for redux",
		"body": [
			"[${4:MES3_}${5:WORK_SITE}_${6:GET}_SUCCESS]: ($$state, action) => {",
			"    return $$state.set('loading', false)",
			"},",
			"export const ${9:ActionModuleContent} = createAction(AJAX_LOADING_TRUE, async (opts) => {",
			"    await axiosFetch({",
			"        service: service_MES3,",
			"        method: getHouseUrl,",
			"        data: opts,",
			"        type: 'post',",
			"    }).then((res) => {",
			"        dispatch({",
			"            type: AJAX_LOADING_FALSE,",
			"        })",
			"        if (res.success) {",
			"            let data = res.data",
			"            if (!Array.isArray(data.records)) {",
			"                data.records = []",
			"            }",
			"            dispatch({",
			"                type: ${4:MES3_}${5:WORK_SITE}_${6:GET}_SUCCESS,",
			"                payload: data.records,",
			"            })",
			"        } else {",
			"            if (typeof res.message === 'string') {",
			"                ajaxFail(res.message)",
			"            } else {",
			"                message.warning('xx出错!')",
			"            }",
			"        }",
			"    }).catch((err) => {",
			"        dispatch({",
			"            type: AJAX_LOADING_FALSE,",
			"        })",
			"        console.log('err', err)",
			"        ajaxCatch(err)",
			"    })",
			"})",
		],
		"description": "React react-redux's ajax: define variable, define action and modify the store "
	},
	"react-redux-ajax2": {
		"prefix": "rral-react-redux-ajax=>local data for state",
		"body": [
			"const ${4:MES3_}${5:WORK_SITE}_${6:GET}_START = '${4:MES3_}${5:WORK_SITE}_${6:GET}_START'",
			"export const ${9:ActionModuleContent} = createAction('${4:MES3_}${5:WORK_SITE}_${6:GET}_START', async (opts) => {",
			"    await axiosFetch({",
			"        service: service_MES3,",
			"        method: getHouseUrl,",
			"        params: opts.params,",
			"        type: 'post',",
			"    }).then((res) => {",
			"        opts.hideLoading && opts.hideLoading()",
			"        if (res.success) {",
			"            let data = res.data",
			"            if (!Array.isArray(data.records)) {",
			"                data.records = []",
			"            }",
			"            opts.successCb && opts.successCb(data.records)",
			"        } else {",
			"            if (typeof res.message === 'string') {",
			"                ajaxFail(res.message)",
			"            } else {",
			"                message.warning('xx出错!')",
			"            }",
			"        }",
			"    }).catch((err) => {",
			"        opts.hideLoading && opts.hideLoading()",
			"        console.log('err', err)",
			"        ajaxCatch(err)",
			"    })",
			"})",
		],
		"description": "React react-redux's ajax: define variable, define action and store the remote data into the component state"
	},
	"react-redux-store-widthout-ajax": {
		"prefix": "!rra-not-react-redux-ajax",
		"body": [
			"export const ${4:MES3_}${5:WORK_SITE}_${6:GET} = '${4:MES3_}${5:WORK_SITE}_${6:GET} >> ${8:open}'",
			"export const ${10:action}${11:module}${12:detailDesc} = createAction(${4:MES3_}${5:WORK_SITE}_${6:GET}, opts => opts)",
			"[${4:MES3_}${5:WORK_SITE}_${6:GET}]: ($$state) => {",
			"    return $$state.set('loading', true)",
			"},",
		],
		"description": "change the react redux store without ajax request"
	},
	"react-component-ajax-baisc-params": {
		"prefix": "rcbap: react component basic params",
		"body": [
			"groupId: store.user.get('accountInfo').get('groupID'),",
			"distributionId: store.user.get('orgID'),",
			"distributionName: store.user.get('orgName'),",
		],
	},
	"react-redux-connect": {
		"prefix": "rrc-connect redux width component",
		"body": [
			"import React, { Component } from 'react'",
			"import { connect } from 'react-redux'",
			"import {",
			"    viewModalClose,",
			"} from '../../../state/productionPlan'",
			"function mapStateToProps(store) {",
			"    return {",
			"        groupId: store.user.get('accountInfo').get('groupID'),",
			"        distributionId: store.user.get('orgID'),",
			"        distributionName: store.user.get('orgName'),",
			"        viewModal: store.mes3_productionPlan.get('viewModal'),",
			"        viewModalItems: store.mes3_productionPlan.get('viewModalItems'),",
			"    }",
			"}",
			"function mapDispatchToProps(dispatch) {",
			"    return {",
			"        viewModalClose: (opts) => { dispatch(viewModalClose(opts)) },",
			"    }",
			"}",
			"@connect(mapStateToProps, mapDispatchToProps)",
			"export default class ViewOrderTable extends Component {",
    		"    constructor(props) {",
			"        super(props)",
			"    }",
			"    render() {",
			"        return ('xxx')",
			"    }",
			"}"
		],
		"description": "connect react-redux with component"
	},
	"react-redux-mapStateToProps": {
		"prefix": "rrs-State-mapStateToProps",
		"body": [
			"${3:records}: store.mes3_${7:productionPlan}.get('${3:records}'),",
		],
		"description": "connect react-redux's store with component's props"
	},
	"react-redux-mapDispathToProps": {
		"prefix": "rrd-Dispatch-mapDispatchToProps",
		"body": [
			"${3:addEditModalOpen}: opts => dispatch(${3:addEditModalOpen}(opts)),"
		],
		"description": "connect react-redux's action with component's props"
	},
	"react-redux-action: dispath-ajax-results": {
		"prefix": "rrdr",
		"body": [
			"dispatch({",
			"    type: ${3:MES3_PRODUCTION_PLAN_MODAL_MANUAL_GOODS_LIST_GET_SUCCESS},",
			"    payload: ${4: modalManualRecordGoodsList},",
			"})",
		],
		"description": "dispath react-redux's action's ajax's results to hide loaing or receive the ajax results"
	},
	"react-redux-action: dispath-another-action": {
		"prefix": "rrda",
		"body": [
			"dispatch(${0:actionModuleDetail})",
		],
		"description": "dispath react-redux's another action in an action"
	},
	"import-moment: import moment": {
		"prefix": "imoment",
		"body": [
			"import moment from 'moment'",
			"import 'moment/locale/zh-cn'",
		],
		"description": "import moment.js lib"
	},
	"import-excel: import moment": {
		"prefix": "iexcel",
		"body": [
			"import { mes3ExportExcel } from '../../../util'",
		],
		"description": "import moment.js lib"
	},
	"react action: react action tip before excuting": {
		"prefix": "ratip-react action tip",
		"body": [
			"const self = this",
			"Modal.confirm({",
			"    title: `确定要删除吗?`,",
			"    content: (<div>",
			"        <p>您将删除生产计划{record.produceBillNo}</p>",
			"        <p style={{ color: '#aeaeae' }}>删除是不可恢复操作，请慎重考虑~</p>",
			"        </div>),",
			"    onOk() {",
			"        self._deleteProductionPlan(record)",
			"    },",
			"    onCancel () {},",
			"})",
		],
		"description": "react action: react action tip before excuting"
	},
	"react ant table query params": {
		"prefix": "ratqp-react ant table query params",
		"body": [
			"const { distributionId, groupId } = this.props",
			"const { pageSize, current } = this.state",
			"const params = {",
				"distributionId,",
				"groupId,",
				"pageNum: current,",
				"pageSize,",
				"...searchValues,",
			"}",
		]
	},
	"import hualala authority": {
		"prefix": "ihlla - Import HuaLaLa Authority",
		"body": [
			"import { Authority } from '@hualala/platform-components'"
		]
	},
	"hualala authority": {
		"prefix": "hlla - HuaLaLa Authority",
		"body": [
			"<Authority rightCode=\"mes3.chaKanShengChanJiHuaDanGuanLi.audit\">",
            "</Authority>",
		]
	},
	"const url name": {
		"prefix": "cun - Const Url Name",
		"body": [
			"export const create${1:DeviceManfacturer}Url = '/${2:equipmentMfrs}/insert' // 新建",
			"export const queryList${1:DeviceManfacturer}Url = '//${2:equipmentMfrs}/listData' // 查询列表",
			"export const delete${1:DeviceManfacturer}Url = '/${2:equipmentMfrs}/del' // 删除",
			"export const switch${1:DeviceManfacturer}Url = '/${2:equipmentMfrs}/updateByStatus' // 切换状态",
			"export const edit${1:DeviceManfacturer}Url = '/${2:equipmentMfrs}/update' // 编辑",
			"export const getDetail${1:DeviceManfacturer}Url = '/${2:equipmentMfrs}/selectMfrsDetail' // 详情",
		]
	},
}
